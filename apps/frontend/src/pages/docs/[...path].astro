---
import { fetchDocPage } from "../../utils/fetch-doc-page";
import { fetchAllPages } from "../../utils/fetch-all-pages";
import { getTree } from "../../utils/get-tree";
import FullPage from "../../components/Docs/FullPage.astro";

let { path: filename } = Astro.params;

if (filename === undefined) {
  filename = "index";
}

filename = `docs/${filename}.md`;

const { content, authors } = await fetchDocPage({ filename });

const { content: readmeContent } = await fetchDocPage({
  filename: "docs/README.md",
});

const docsTree = getTree(readmeContent, "/docs/");

let breadcrumbs: Array<{ title: string; url: string }> = [];

// TODO: maybe support multiple levels :)
for (const [sectionName, section] of Object.entries(docsTree)) {
  const source = filename.replace(/^docs\//, "./");

  // @ts-ignore
  if (section.links && section.links.some((link) => link.source === source)) {
    breadcrumbs = [
      {
        title: sectionName,
        url: "",
      },
    ];
  }
}

export async function getStaticPaths() {
  const allPages = await fetchAllPages();

  return allPages.map((page) => {
    let path: string | undefined = page.replace("docs/", "");

    path = path.replace("README.md", "");
    path = path.replace(".md", "");

    if (path === "") {
      path = undefined;
    }

    return {
      params: {
        path,
      },
    };
  });
}
---

<FullPage content={content} authors={authors} breadcrumbs={breadcrumbs} />
